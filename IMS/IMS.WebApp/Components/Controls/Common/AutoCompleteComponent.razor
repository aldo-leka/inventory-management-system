<div class="form-group">
    <label for="search">@Label</label>
    <input type="text"
    class="form-control"
    @bind-value="userInput"
    @bind-value:event="oninput"
    @onkeyup="OnKeyUp" />
</div>
@if (searchResults is not null && searchResults.Count > 0)
{
    <div style="overflow-y: auto; max-height: 300px; border: 1px solid silver; padding-top: 5px">
        <ul style="list-style-type: none">
            @{
                int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    <li @key="item.Id"
                    @onclick="() => HandleSelectItem(item)"
                    style="cursor: pointer; @(itemIndex == currentItemIndex ? "background-color: antiquewhite;" : "")">
                        @item.Name
                    </li>

                    itemIndex++;
                }
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    // same same
    // public delegate List<ItemViewModel> SearchFunction(string searchFilter);

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? selectedItem = null;

    private string _userInput = string.Empty;
    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                searchResults = SearchFunction(_userInput);
            }
        }
    }

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private void HandleSelectItem(ItemViewModel? item)
    {
        ClearHighlighting();

        if (item != null)
        {
            this.selectedItem = item;
            this.userInput = item?.Name ?? string.Empty;
            this.searchResults = null;

            OnItemSelected.InvokeAsync(item);
        }
    }

    private void ClearHighlighting()
    {
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private void OnKeyUp(KeyboardEventArgs eventArgs)
    {
        if (searchResults is not null &&
            searchResults.Count > 0 &&
            (eventArgs.Code == "ArrowDown" || eventArgs.Code == "ArrowUp"))
        {
            if (eventArgs.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
            {
                currentItem = searchResults[++currentItemIndex];
            }
            else if (eventArgs.Code == "ArrowUp")
            {
                if (currentItemIndex > 0)
                {
                    currentItem = searchResults[--currentItemIndex];
                }
                else
                {
                    currentItem = null;
                    currentItemIndex = -1;
                }
            }
        }
        else if (eventArgs.Code == "Enter" || eventArgs.Code == "NumpadEnter")
        {
            HandleSelectItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
